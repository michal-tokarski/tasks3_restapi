
buildscript {
	ext {
		// springBootVersion = '2.0.5.RELEASE'
		springBootVersion = '2.3.1.RELEASE'
	}
	repositories {
		mavenCentral()
	}
	dependencies {
		// classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
		classpath "org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}"
	}
}

plugins {
	id 'org.springframework.boot' version '2.3.1.RELEASE'
	id 'io.spring.dependency-management' version '1.0.9.RELEASE'
	id 'java'
}

apply plugin: 'java'
apply plugin: 'eclipse'
apply plugin: 'org.springframework.boot'
apply plugin: 'io.spring.dependency-management'
// apply plugin: 'war'

group = 'com.crud'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = 1.8

repositories {
	mavenCentral()
}

dependencies {

	// A. Spring-boot-starter-web :
	implementation 'org.springframework.boot:spring-boot-starter-web'
	compile('org.springframework.boot:spring-boot-starter-web')

	// B. Spring-boot-starter-test :
	testImplementation('org.springframework.boot:spring-boot-starter-test') {
		exclude group: 'org.junit.vintage', module: 'junit-vintage-engine'}
	// testCompile('org.springframework.boot:spring-boot-starter-test') // deprecated
	testImplementation('org.springframework.boot:spring-boot-starter-test')

	// C. Spring-boot-starter-data :
	compile('org.springframework.boot:spring-boot-starter-data-jpa')

	// D. Lombok :
	// compileOnly 'org.projectlombok:lombok' // (without version number)
	// annotationProcessor 'org.projectlombok:lombok' // (without version number)
	// compile('org.projectlombok:lombok') // (without version number)
	compileOnly 'org.projectlombok:lombok:1.18.12' // (with version number)
	annotationProcessor 'org.projectlombok:lombok:1.18.12' // (with version number)
	testCompileOnly 'org.projectlombok:lombok:1.18.12' // (with version number)
	testAnnotationProcessor 'org.projectlombok:lombok:1.18.12' // (with version number)
	compile('org.projectlombok:lombok:1.18.12') // (with version number)

	// E. DB connector :
	compile('mysql:mysql-connector-java') // for Tomcat
	// compile('org.postgresql:postgresql') // for Heroku

	// F. Spring-boot-starter-tomcat :
	// providedRuntime("org.springframework.boot:spring-boot-starter-tomcat") // for Tomcat

}

test {
	useJUnitPlatform()
}
